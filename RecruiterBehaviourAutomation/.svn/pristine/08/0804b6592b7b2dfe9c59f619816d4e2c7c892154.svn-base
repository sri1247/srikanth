import Actions.BrowserSetup;
import Actions.MonsterSearchPage;
import Actions.SeleniumActions;
import Utility.Constant;
import Utility.Excelutility;
import Actions.PageFactory;
import locators.LoginPageLocators;
import locators.SearchLocators;
import org.openqa.selenium.WebDriver;
import org.testng.Assert;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import static locators.SearchLocators.*;

/**
 * Created by Srikanth on 3/22/2017.
 */
public class MonsterTest {
    public WebDriver driver;
    SeleniumActions seleniumActions;
    MonsterSearchPage monster;
    BrowserSetup browsersetup;
    Excelutility excelutility;
// url= Constant.monsterURL;


    public PageFactory getPageFactory() {
        return new PageFactory(driver);
    }
    // String jobportal= "Monster";

    @BeforeTest
    @Parameters("browser")

    public void login(String browser) {


        try {
            excelutility = new Excelutility();
            excelutility.setExcelFile(Constant.Path_TestData + Constant.readFile_TestData);
            String jobportal = excelutility.getCellData(1, 0, "sheet1");
            String username = excelutility.getCellData(1, 1, "Sheet1");
            String password = excelutility.getCellData(1, 2, "Sheet1");
            browsersetup = getPageFactory().browserSetup();
            driver = browsersetup.startBrowser(browser);
            seleniumActions = getPageFactory().seleniumActions();
            monster = getPageFactory().monster();
            monster.geturl(jobportal);
            monster.login(jobportal, username, password);
            seleniumActions.wait(120, "visibilitypfelementlocated", "xpath", LoginPageLocators.monsterPopup);

        } catch (Exception e) {
            e.printStackTrace();
            //reportExcel

        }

    }


    @Test
    //  @Parameters("browser")
    public void MonsterTest() throws Exception {
        Excelutility excelutility = new Excelutility();
        excelutility.setExcelFile(Constant.Path_TestData + Constant.readFile_TestData);
        Assert.assertEquals("MonsterIndia.com - More jobs for Indians", driver.getTitle(), "login details are not correct");
        String anySkill = excelutility.getCellData(1, 3, "sheet1");
        String allSkills = excelutility.getCellData(1, 4, "Sheet1");
        String excludingvalue = excelutility.getCellData(1, 5, "Sheet1");
        String resume = excelutility.getCellData(1, 6, "Sheet1");
        String minExpernice = excelutility.getIntcell(1, 7, "Sheet1");
        String maxExpernice = excelutility.getIntcell(1, 8, "Sheet1");
        String industry = excelutility.getCellData(1, 9, "Sheet1");
        String rolesection = excelutility.getCellData(1, 10, "sheet1");
        String role = excelutility.getCellData(1, 11, "sheet1");
        String currentlocation = excelutility.getCellData(1, 12, "Sheet1");
        String preferredlocation = excelutility.getCellData(1, 13, "Sheet1");
        String company = excelutility.getCellData(1, 14, "Sheet1");
        String excludeCompany = excelutility.getCellData(1, 15, "Sheet1");
        String desigination = excelutility.getCellData(1, 16, "Sheet1");
        String noticeperiod = excelutility.getCellData(1, 17, "Sheet1");
        String salaryMinValue = excelutility.getIntcell(1, 18, "sheet1");
        String salaryMaxValue = excelutility.getIntcell(1, 19, "sheet1");
        String education = excelutility.getCellData(1, 22, "Sheet1");
        String specialCourse = excelutility.getCellData(1, 23, "sheet1");
        String yearofPassingFromValue = excelutility.getIntcell(1, 20, "sheet1");
        String yearofPassingToValue = excelutility.getIntcell(1, 21, "sheet1");
        String nationality = excelutility.getCellData(1, 24, "Sheet1");
        String language = excelutility.getCellData(1, 25, "Sheet1");
        String activeresume = excelutility.getCellData(1, 26, "Sheet1");
        String jobType = excelutility.getCellData(1, 27, "Sheet1");
        String educationSpecialiZation = excelutility.getCellData(1, 28, "Sheet1");


        try {
            browsersetup = getPageFactory().browserSetup();
            seleniumActions.jsclick("xpath", LoginPageLocators.monsterPopup);
            seleniumActions.jsclick("xpath", SearchLocators.searchpageoption);
            monster.sendData(anySkill, anyLocator);
            monster.sendData(allSkills, allLocator);
            monster.sendData(excludingvalue, excluding);
            monster.selectOnText(etireResume, resume);
            monster.sendData(minExpernice, experienceMinYrs);
            monster.sendData(maxExpernice, experienceMaxYrs);
            monster.enterondropdownvalue(currentLocation, inputOnCurrentLocation, currentlocation);
            monster.enterondropdownvalue(preferredLocation, inputOnPreferredLocation, preferredlocation);
            monster.selectOnLinkText(anyofthecompaniesOptions, company);
            monster.selectOnLinkText(excludecompaniesOptions, excludeCompany);
            monster.selectOnLinkText(designationOptions, desigination);
            monster.selectIndustry(industry);
            monster.selectRole(rolesection, role);
            monster.selectOnText(noticePeriod, noticeperiod);
            monster.selectSalary(salaryMin, salaryMinValue);
            monster.selectSalary(salaryMax, salaryMaxValue);
            monster.enterondropdownvalue(highestdegree, inputonhighestdegree, education);
            monster.selectSpecialization(specialization, educationSpecialiZation, specialCourse);
            monster.selectOnLinkText(yearofPassingFrom, yearofPassingFromValue);
            monster.selectOnLinkText(yearofPassingTo, yearofPassingToValue);
            //monster.enterondropdownvalue(SearchLocators.nationality, inputonnationality, nationality);
            monster.enterondropdownvalue(languageKnown, inputonLangugeKnown, language);
            monster.selectOnText(showResumesACtive, activeresume);
            monster.clickOnEle("xpath", getResumes);
            monster.getprofilesData();


        } catch (Exception e) {
            e.printStackTrace();


        }


    }


    @AfterTest

    public void logOut() {
        monster.logout();
        seleniumActions.closeAll(driver);

    }
}